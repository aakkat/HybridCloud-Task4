provider "aws" {
  region = "ap-south-1"
  profile = "aakkat"

}

##Creation of VPC

resource "aws_vpc" "main"{
  cidr_block  = "192.168.0.0/16"
  instance_tenancy = "default"
  enable_dns_hostnames = "true"

  tags = {
    Name = "akvpc"
   }
}

##Creation of subnet

resource "aws_subnet" "subnet1" {
 vpc_id = aws_vpc.main.id
 cidr_block = "192.168.0.0/24" 
 map_public_ip_on_launch = true
 availability_zone = "ap-south-1a"

 tags = {
   Name = "public_subnet"
 }
}  

resource "aws_subnet" "subnet2" {
 vpc_id = aws_vpc.main.id
 cidr_block = "192.168.1.0/24" 
 availability_zone = "ap-south-1b"

 tags = {
   Name = "private_subnet"
 }
}  

##Creation of internet gateway

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "in_gateway"
  }
}


##Creation of route table

resource "aws_route_table" "route_table" {
  vpc_id = aws_vpc.main.id
  
  route {
      cidr_block = "0.0.0.0/0"
      gateway_id = aws_internet_gateway.gw.id
   }

  tags = {
    Name = "akroute_table"
  }
}

##Associating the route table
 
resource"aws_route_table_association" "a" {
  subnet_id  = aws_subnet.subnet1.id
  route_table_id = aws_route_table.route_table.id
}

resource "aws_route" "r" {
 route_table_id      = aws_route_table.route_table.id
 destination_cidr_block = "0.0.0.0/0"
 gateway_id = aws_internet_gateway.gw.id

}

resource "tls_private_key" "this" {
  algorithm = "RSA"
}

module "key_pair" {
 source = "terraform-aws-modules/key-pair/aws"

 key_name = "key2a"
 public_key = tls_private_key.this.public_key_openssh
}

##Creation of security groups

#a) Security group for our wordpress instance:

resource "aws_security_group" "sg1" {
 name  = "sg_wordpress"
 description = "Allow TLS inbound traffic"
 vpc_id = aws_vpc.main.id
 
 ingress {
   description = "ssh"
   from_port = 22
   to_port  = 22
   protocol = "tcp"
   cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "http"
    from_port = 80
    to_port = 80
    protocol = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port = 0
    to_port = 0
    protocol = "-1"
    cidr_blocks = ["0.0.0.0/0"]
   }
 
   tags = {
     Name = "sg_wordpress"
   }
}




##Security group for MYSQL DB instance

resource "aws_security_group" "sg2" {
  name = "sg_mysql"
  description = "Allow MYSQL"
  vpc_id  = aws_vpc.main.id
 
  ingress {
    description = "MYSQL/Aurora"
    from_port = 3306
    to_port  = 3306
    protocol = "tcp"
    security_groups = [aws_security_group.sg1.id]
 }

  egress {
    from_port   =  0
    to_port 	=  0
    protocol	= "-1"
    cidr_blocks	= ["0.0.0.0/0"]
 }
 
  tags = {
    Name = "sg_mysql"
  }
} 


##Wordpress instance

resource "aws_instance" "wordpress" {
  ami    	= "ami-7e257211"
  instance_type = "t2.micro"
  key_name 	= "key2a"
  vpc_security_group_ids = [ aws_security_group.sg1.id ]
  subnet_id = aws_subnet.subnet1.id
  

  tags = {
    Name = "wordpress-os"
   }
}

##MySql Instance

resource "aws_instance" "mysql" {
  ami    	= "ami-08706cb5f68222d09"
  instance_type = "t2.micro"
  key_name 	= "key2a"
  vpc_security_group_ids = [ aws_security_group.sg2.id ]
  subnet_id = aws_subnet.subnet2.id

  tags = {
    Name = "mysql-os"
   }
}


## creating the EIP for NAT Gateway

resource "aws_eip" "nat-eip" {
  vpc = true


  depends_on = [ aws_internet_gateway.gw ]
}

## Creating the NAT Gateway

resource "aws_nat_gateway" "natgw" {
  allocation_id = aws_eip.nat-eip.id
  subnet_id = aws_subnet.subnet1.id

  depends_on = [ aws_internet_gateway.gw ]

  tags = {
    Name = "my-natgw"
  }
}

## To associate the route table with the private subnet for public access

resource "aws_route_table_association" "private_sn_assoc" {
  subnet_id = aws_subnet.subnet2.id
  route_table_id = aws_route_table.route_table.id
}

